package com.inminhouse.study.spring.ch02;

import java.util.Arrays;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

@Configuration // 이 클래스를 스프링 설정으로 사용함
// @Import(클래스명.class) 는 xml의 <import> 태그와 동일한 기능을 수행
// @ImportResource("classpath:설정파일.xml") xml 파일도 설정으로 사용할 수 있게 해줌
// @ComponentScan(basePackages=패키지명) <context:component-scan> 태그와 동일
public class Config {

	@Bean // 이 메서드의 리턴 값을 빈 객체로 사용함
	public User user1() {
		return new User("bkchoi", "1234");
	}
	
	@Bean(name="user2") // name 속성을 사용하지 않으면 메서드의 이름을 식별자로 사용
	public User user() {
		return new User("madvirus", "qwer");
	}
	
	@Bean
	public UserRepository userRepository() {
		UserRepository userRepo = new UserRepository();
		userRepo.setUsers(Arrays.asList(user1(), user()));
		return userRepo;
	}
	
	@Bean
	public PasswordChangeService pwChangeSvc() {
		return new PasswordChangeService(userRepository());
	}
	
	@Bean
	public AuthFailLogger authFailLogger() {
		AuthFailLogger logger = new AuthFailLogger();
		logger.setThreshold(2);
		return logger;
	}
	
	@Bean
	public AuthenticationService authenticationService() {
		AuthenticationService authSvc = new AuthenticationService();
		authSvc.setFailLogger(authFailLogger());
		/*
		 * 30 라인의 userRepository() 메서드가 리턴하는 객체와 아래 userRepository() 호출 후 리턴 객체는 같다.
		 * 스프링이 런타임에 Config 클래스를 상속받아 새로운 클래스를 만들어 userRepository를 오버라이딩 하기 때문이다.
		 * 오버라이딩은 아래와 같은 방식으로 이루어진다. 
		 * public class AutoGeneratedConfig extends Config {
		 *    private UserRepository userRepository;
		 *    ...
		 *    if(userRepository == null) {
		 *    	userRepository = super.userRepository();
		 *    }
		 *    ...
		 * (!) 따라서 @Bean 메서드는 private이거나 final이면 안된다.
		 */
		authSvc.setUserRepository(userRepository());
		return authSvc;
	}
	
	@Bean
	public ClientFactoryBean clientFactoryBean() {
		ClientFactoryBean factoryBean = new ClientFactoryBean();
		factoryBean.setServer("1.2.3.4");
		factoryBean.setPort(27);
		factoryBean.setContentType("json");
		factoryBean.setEncoding("euckr");
		return factoryBean;
	}
}
